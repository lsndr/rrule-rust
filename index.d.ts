/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum Frequency {
  Yearly = 0,
  Monthly = 1,
  Weekly = 2,
  Daily = 3,
  Hourly = 4,
  Minutely = 5,
  Secondly = 6
}
export const enum Month {
  January = 0,
  February = 1,
  March = 2,
  April = 3,
  May = 4,
  June = 5,
  July = 6,
  August = 7,
  September = 8,
  October = 9,
  November = 10,
  December = 11
}
export interface NWeekday {
  /**
   * If set, this represents the nth occurrence of the weekday.
   * Otherwise it represents every occurrence of the weekday.
   *
   * A negative value represents nth occurrence from the end.
   */
  n?: number
  weekday: Weekday
}
export const enum Weekday {
  Monday = 0,
  Tuesday = 1,
  Wednesday = 2,
  Thursday = 3,
  Friday = 4,
  Saturday = 5,
  Sunday = 6
}
export class RRule {
  constructor(frequency: Frequency)
  static parse(str: string): RRule
  get frequency(): Frequency
  get interval(): number
  get count(): number | null
  get byWeekday(): NWeekday[]
  get byHour(): Array<number>
  get byMinute(): Array<number>
  get bySecond(): Array<number>
  get byMonthday(): Array<number>
  get bySetpos(): Array<number>
  get byMonth(): Month[]
  get byWeekno(): Array<number>
  get byYearday(): Array<number>
  get weekstart(): Weekday
  get until(): RRuleDateTime | null
  toString(): string
  setInterval(interval: number): this
  setCount(count: number): this
  setByWeekday(weekdays: ReadonlyArray<NWeekday | Weekday>): this
  setByHour(hours: ReadonlyArray<number>): this
  setByMinute(minutes: ReadonlyArray<number>): this
  setBySecond(seconds: ReadonlyArray<number>): this
  setByMonthday(days: ReadonlyArray<number>): this
  setBySetpos(poses: ReadonlyArray<number>): this
  setByMonth(months: ReadonlyArray<Month>): this
  setByWeekno(weekNumbers: ReadonlyArray<number>): this
  setByYearday(days: ReadonlyArray<number>): this
  setWeekstart(day: Weekday): this
  setUntil(dateTime: RRuleDateTime | Date): this
}
export class RRuleDateTime {
  constructor(date: Date | number, timezone?: string | undefined | null)
  get timestamp(): number
  get timezone(): RRuleTimezone
  get day(): number
  get month(): number
  get year(): number
  get hour(): number
  get minute(): number
  get second(): number
  get millisecond(): number
  get toString(): string
  toDate(): Date
  toUtcDate(): Date
}
export class RRuleSet {
  constructor(dtstart: RRuleDateTime | Date)
  setFromString(str: string): this
  static parse(str: string): RRuleSet
  toString(): string
  addRrule(jsRrule: RRule): this
  addExrule(jsRrule: RRule): this
  addExdate(dateTime: RRuleDateTime | Date): this
  addRdate(dateTime: RRuleDateTime | Date): this
  get dtstart(): RRuleDateTime
  getRrules(): Array<RRule>
  getExrules(): Array<RRule>
  getExdates(): Array<RRuleDateTime>
  getRdates(): Array<RRuleDateTime>
  all(limit?: number | undefined | null): Array<RRuleDateTime>
  between(after: RRuleDateTime | Date, before: RRuleDateTime | Date, inclusive?: boolean | undefined | null): Array<RRuleDateTime>
  occurrences(): Occurrences
}
export class Occurrences {
  [Symbol.iterator](): Iterator<RRuleDateTime, void, void>
}
export class RRuleTimezone {
  constructor(tz: string)
  /**
  * The name of the timezone. If the timezone is local, it will return "Local".
  */
  get name(): string
  get isLocal(): boolean
}
